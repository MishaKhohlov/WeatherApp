(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

require('./settings_search/searchModel');

var _page_sliderPage_sliderControllerJs = require('./page_slider/page_sliderController.js');

var _appModelAppModelJs = require('./appModel/appModel.js');

var _settings_searchSearchControllerJs = require('./settings_search/searchController.js');

var _settings_scrollSettings_scrollControllerJs = require('./settings_scroll/settings_scrollController.js');

var _settings_degreesSettings_degreesControllerJs = require('./settings_degrees/settings_degreesController.js');

var _settings_rangeSettings_rangeControllerJs = require('./settings_range/settings_rangeController.js');

require('./weather_slider/weather_sliderController');

require('./weather/weatherController.js');

require('./weather_days/weather_daysView.js');

var _sunSunControllerJs = require('./sun/sunController.js');

$(document).ready(function () {
  _page_sliderPage_sliderControllerJs.page_sliderController.init();
  _settings_searchSearchControllerJs.searchController.init();
  _settings_scrollSettings_scrollControllerJs.settings_scrollController.init();
  _settings_degreesSettings_degreesControllerJs.settings_degreesController.init();
  _settings_rangeSettings_rangeControllerJs.settings_rangeController.init();
  _sunSunControllerJs.sunController.init();
  _appModelAppModelJs.modelApp.getUpdateData();
});

},{"./appModel/appModel.js":2,"./page_slider/page_sliderController.js":6,"./settings_degrees/settings_degreesController.js":9,"./settings_range/settings_rangeController.js":11,"./settings_scroll/settings_scrollController.js":13,"./settings_search/searchController.js":15,"./settings_search/searchModel":16,"./sun/sunController.js":20,"./weather/weatherController.js":22,"./weather_days/weather_daysView.js":26,"./weather_slider/weather_sliderController":29}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _backboneEventsInitJs = require('../backboneEventsInit.js');

var _forecast_serviceForecast_serviceJs = require('../forecast_service/forecast_service.js');

var modelApp = (function () {
  var data = {},
      currenCity = undefined,
      dataCity = undefined,
      flagTemp = false,
      flagDay = undefined,
      timer = undefined,
      previousPhase = 0;

  if (localStorage.getItem('flagTemp') === 'true') {
    flagTemp = true;
  }

  if (localStorage.getItem('flagDay')) {
    flagDay = localStorage.getItem('flagDay');
  }

  if (localStorage.getItem('WeatherApp')) {
    dataCity = JSON.parse(window.localStorage.WeatherApp);
    console.log(dataCity);
  } else {
    // default
    dataCity = {
      'ChIJiw-rY5-gJ0ERCr6kGmgYTC0': {
        latitude: 49.9935,
        longitude: 36.230383000000074,
        name: "Kharkiv"
      }
    };
  }

  function updateListCity(name, latitude, longitude, nameCity) {
    dataCity[name] = {
      latitude: latitude,
      longitude: longitude,
      name: nameCity
    };
    localStorage.setItem('WeatherApp', JSON.stringify(dataCity));
  }

  // forecast
  function getData(reload) {
    var promises = [];

    var _loop = function (prop) {
      promises.push(new Promise(function (resolve, reject) {
        _forecast_serviceForecast_serviceJs.forecast_service.getData(dataCity[prop].latitude, dataCity[prop].longitude, function (val) {
          data[prop] = _.extend(val, { name: dataCity[prop].name });
          resolve();
        }, function () {
          reject();
        });
      }));
    };

    for (var prop in dataCity) {
      _loop(prop);
    }
    Promise.all(promises).then(function () {
      if (!reload) {
        currenCity = Object.keys(data)[0];
      }

      localStorage.setItem('WeatherAppData', JSON.stringify(data));
      _backboneEventsInitJs.gEvent.trigger("dataGet", data, currenCity, flagTemp, false, flagDay);
    })['catch'](function () {
      data = JSON.parse(localStorage.getItem('WeatherAppData'));
      currenCity = Object.keys(data)[0];
      _backboneEventsInitJs.gEvent.trigger("dataGet", data, currenCity, flagTemp, false, flagDay);
    });
  }

  _backboneEventsInitJs.gEvent.on('deletedCityList', function (objList) {
    if (objList) {
      for (var item in objList) {
        delete dataCity[item];
        delete data[item];
      }

      localStorage.setItem('WeatherApp', JSON.stringify(dataCity));

      if (!data[currenCity] && Object.keys(dataCity).length) {
        currenCity = Object.keys(dataCity)[0];
      }
      if (data[currenCity]) {
        _backboneEventsInitJs.gEvent.trigger("dataGet", data, currenCity, flagTemp, false, flagDay);
      } else {
        _backboneEventsInitJs.gEvent.trigger("resetCity", {});
      }
    }
  });

  _backboneEventsInitJs.gEvent.on('updateViewDays', function (dayCount) {
    flagDay = dayCount;
    localStorage.setItem('flagDay', flagDay);
  });

  return {
    getUpdateData: function getUpdateData() {
      // default reload 30min
      timer = setInterval(getData, 30 * 1000 * 60);
      getData();
    },

    addCity: function addCity(name, nameCity, latitude, longitude) {
      if (Object.keys(dataCity)[0] && !data[name]) {

        updateListCity(name, latitude, longitude, nameCity);
        _forecast_serviceForecast_serviceJs.forecast_service.getData(latitude, longitude, function (val) {
          data[name] = _.extend(val, { name: nameCity });
          _backboneEventsInitJs.gEvent.trigger('dataUpdate', data, name, flagTemp, false, flagDay);
        });

        localStorage.setItem('WeatherAppData', JSON.stringify(data));
      } else if (Object.keys(dataCity).length === 0) {

        updateListCity(name, latitude, longitude, nameCity);
        getData();
      } else {
        _backboneEventsInitJs.gEvent.trigger('deletedCityList', {});
      }
    },

    getCurentCity: function getCurentCity() {
      return currenCity;
    },

    changeCurentCity: function changeCurentCity(index) {
      currenCity = Object.keys(data)[index];
      _backboneEventsInitJs.gEvent.trigger("slideChange", data, currenCity);
    },
    getPreviousPhase: function getPreviousPhase() {
      return previousPhase;
    },

    setPreviousPhase: function setPreviousPhase(phase) {
      previousPhase = phase;
    },

    changeTemp: function changeTemp(flag) {
      flagTemp = flag;
      localStorage.setItem('flagTemp', flagTemp);

      var changeState = true;
      _backboneEventsInitJs.gEvent.trigger("dataGet", data, currenCity, flagTemp, changeState, flagDay);
    },

    reloadData: function reloadData() {
      getData(true);
    },

    updateDataInterval: function updateDataInterval(interval) {
      if (interval !== 0) {
        timer = setInterval(getData, interval * 1000 * 60);
      }
    }
  };
})();
exports.modelApp = modelApp;

},{"../backboneEventsInit.js":3,"../forecast_service/forecast_service.js":4}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var gEvent = Object.assign({}, Backbone.Events);
exports.gEvent = gEvent;

},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var forecast_service = (function () {

  function getRequest(latitude, longitude, callback, callbackError) {
    $.ajax({
      url: 'https://api.forecast.io/forecast/004c891d3227671408bc5f081431dee0/' + latitude + ',' + longitude,
      jsonp: "callback",
      dataType: "jsonp",
      error: callbackError,
      success: callback
    });
  }

  return {
    getData: function getData(latitude, longitude, callback, callbackError) {
      getRequest(latitude, longitude, callback, callbackError);
    }
  };
})();
exports.forecast_service = forecast_service;

},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var googleServices = (function () {
  var _service = undefined,
      _placeInf = undefined,
      div = undefined,
      map = undefined;

  function searchAPI() {
    function initialize() {
      _service = new google.maps.places.AutocompleteService();
      google.maps.event.addDomListener(window, 'load', initialize);
    }

    initialize();
  }

  function initPlace() {
    div = document.createElement('div');
    map = new google.maps.Map(div);
    _placeInf = new google.maps.places.PlacesService(map);
  }

  return {
    init: function init() {
      if (window.google) {
        searchAPI();
        initPlace();
      }
    },
    service: function service() {
      return _service;
    },
    placeInf: function placeInf() {
      return _placeInf;
    }
  };
})();
exports.googleServices = googleServices;

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _appModelAppModelJs = require('../appModel/appModel.js');

var _page_sliderPage_sliderViewJs = require('../page_slider/page_sliderView.js');

var _weatherWeatherViewJs = require('../weather/weatherView.js');

var _weather_daysWeather_daysViewJs = require('../weather_days/weather_daysView.js');

var _backboneEventsInitJs = require('../backboneEventsInit.js');

var _page_sliderTemplateJs = require('./page_sliderTemplate.js');

var _page_sliderTemplateJs2 = _interopRequireDefault(_page_sliderTemplateJs);

var page_sliderTemplate = new _page_sliderTemplateJs2['default']();

var page_sliderController = (function () {
  var cashTimeStampEvent = 0,
      slider = undefined,
      currentSlider = 0;

  _backboneEventsInitJs.gEvent.on('dataUpdate', function (data, name, flagTemp, changeState, flagDay) {
    var containerGlobal = $(page_sliderTemplate.renderTemplate());
    var containerItem = $(containerGlobal).find('.slider_item')[0];
    _page_sliderPage_sliderViewJs.page_sliderView.renderContainer(containerGlobal);
    _weatherWeatherViewJs.weatherView.render(data[name], containerItem, flagTemp);
    _weather_daysWeather_daysViewJs.weather_daysView.render(data[name], containerItem, flagTemp, flagDay);
    slider.reloadSlider();
    slider.goToSlide(slider.getSlideCount() - 1);
  });

  _backboneEventsInitJs.gEvent.on('dataGet', function (data, name, flagTemp, changeState, flagDay) {
    _page_sliderPage_sliderViewJs.page_sliderView.reset();
    for (var item in data) {
      var containerGlobal = $(page_sliderTemplate.renderTemplate());
      var containerItem = $(containerGlobal).find('.slider_item')[0];

      _page_sliderPage_sliderViewJs.page_sliderView.renderContainer(containerGlobal);
      _weatherWeatherViewJs.weatherView.render(data[item], containerItem, flagTemp);
      _weather_daysWeather_daysViewJs.weather_daysView.render(data[item], containerItem, flagTemp, flagDay);

      slider.reloadSlider();
    }

    _weatherWeatherViewJs.weatherView.changeAnimation(data[Object.keys(data)[0]]);

    if (currentSlider && currentSlider < slider.getSlideCount()) {
      slider.goToSlide(currentSlider);
      _weatherWeatherViewJs.weatherView.changeAnimation(data[Object.keys(data)[currentSlider]]);
    }
  });

  _backboneEventsInitJs.gEvent.on("resetCity", function () {
    _page_sliderPage_sliderViewJs.page_sliderView.reset();
    slider.destroySlider();
  });

  return {
    init: function init() {
      _page_sliderPage_sliderViewJs.page_sliderView.initElements();
      slider = _page_sliderPage_sliderViewJs.page_sliderView.elems().slider;
      slider.bxSlider({
        onSlideAfter: function onSlideAfter() {
          currentSlider = slider.getCurrentSlide();
          _appModelAppModelJs.modelApp.changeCurentCity(currentSlider);
        }
      });

      if (jQuery.support.touch) {
        _page_sliderPage_sliderViewJs.page_sliderView.event.slideEv(function (ev) {

          if (ev.target.classList[0] === 'weather_content') {
            cashTimeStampEvent = ev.timeStamp;
          }
          if (cashTimeStampEvent + 50 < ev.timeStamp) {
            if (ev.gesture.overallVelocityX > 0) {
              slider.goToNextSlide();
            } else {
              slider.goToPrevSlide();
            }
          }
        });
      }
    },
    goToNextSities: function goToNextSities(numPage) {
      slider.goToSlide(numPage);
    }
  };
})();
exports.page_sliderController = page_sliderController;

},{"../appModel/appModel.js":2,"../backboneEventsInit.js":3,"../page_slider/page_sliderView.js":8,"../weather/weatherView.js":24,"../weather_days/weather_daysView.js":26,"./page_sliderTemplate.js":7}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _default = function _default() {
  _classCallCheck(this, _default);

  this.renderTemplate = function () {
    return "<div class=\"bxslider_item\"><div class=\"slider_item\"></div></div>";
  };
};

exports["default"] = _default;
module.exports = exports["default"];

},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var page_sliderView = (function () {
  var page = undefined,
      scrollContent = undefined,
      slider = undefined;
  return {
    initElements: function initElements() {
      page = $(".page_center");
      scrollContent = $(".scroll-content");
      slider = $('.bxslider');
    },
    renderContainer: function renderContainer(elem) {
      slider.append(elem);
    },
    reset: function reset() {
      if (slider) {
        slider.html('');
      }
    },
    event: {
      slideEv: function slideEv(callback) {
        page.hammer().bind("swipe", callback);
      }
    },
    elems: function elems() {
      return {
        slider: slider
      };
    }
  };
})();
exports.page_sliderView = page_sliderView;

},{}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _settings_degreesSettings_degreesViewJs = require('../settings_degrees/settings_degreesView.js');

var _appModelAppModelJs = require('../appModel/appModel.js');

var settings_degreesController = (function () {
  return {
    init: function init() {
      _settings_degreesSettings_degreesViewJs.settings_degreesView.initElements();

      _settings_degreesSettings_degreesViewJs.settings_degreesView.event.changeTemp(function (ev) {
        if (ev.target.attributes['data-temp'].value === 'cl') {
          _appModelAppModelJs.modelApp.changeTemp(false);
        } else {
          _appModelAppModelJs.modelApp.changeTemp(true);
        }
      });
    }
  };
})();
exports.settings_degreesController = settings_degreesController;

},{"../appModel/appModel.js":2,"../settings_degrees/settings_degreesView.js":10}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var settings_degreesView = (function () {
  var radioBut;
  return {
    initElements: function initElements() {
      radioBut = $(".setting_degrees input[name=temp]:radio");

      if (localStorage.getItem('flagTemp') === 'true') {
        $(radioBut[1]).attr('checked', '');
      } else {
        $(radioBut[0]).attr('checked', '');
      }
    },
    event: {
      changeTemp: function changeTemp(callback) {
        radioBut.change(callback);
      }
    }
  };
})();
exports.settings_degreesView = settings_degreesView;

},{}],11:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appModelAppModelJs = require('../appModel/appModel.js');

var _settings_rangeViewJs = require('./settings_rangeView.js');

var _backboneEventsInitJs = require('../backboneEventsInit.js');

var settings_rangeController = (function () {

  return {
    init: function init() {
      _settings_rangeViewJs.settings_rangeView.initSlider();
      _settings_rangeViewJs.settings_rangeView.event.sliderChange1(function (event, ui) {
        _backboneEventsInitJs.gEvent.trigger('updateViewDays', ui.value);
      });
      _settings_rangeViewJs.settings_rangeView.event.sliderChange2(function (event, ui) {
        _appModelAppModelJs.modelApp.updateDataInterval(ui.value);
      });
    }
  };
})();
exports.settings_rangeController = settings_rangeController;

},{"../appModel/appModel.js":2,"../backboneEventsInit.js":3,"./settings_rangeView.js":12}],12:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var settings_rangeView = (function () {
  return {
    initSlider: function initSlider() {
      var dayValue = 7;
      if (localStorage.getItem('flagDay')) {
        dayValue = Number(localStorage.getItem('flagDay'));
      }
      $("#slider-range-max").slider({
        range: "max",
        min: 1,
        max: 7,
        value: dayValue,
        slide: function slide(event, ui) {
          $("#amount").val(ui.value);
        }
      });

      $("#amount").val($("#slider-range-max").slider("value"));

      $("#slider-range-max2").slider({
        range: "max",
        value: 30,
        min: 15,
        max: 60,
        step: 15,
        slide: function slide(event, ui) {
          $("#amount2").val(ui.value);
        }
      });
      $("#amount2").val($("#slider-range-max2").slider("value"));
    },
    event: {
      sliderChange1: function sliderChange1(callback) {
        $("#slider-range-max").slider({
          change: callback
        });
      },
      sliderChange2: function sliderChange2(callback) {
        $("#slider-range-max2").slider({
          change: callback
        });
      }
    }
  };
})();
exports.settings_rangeView = settings_rangeView;

},{}],13:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _settings_scrollSettings_scrollViewJs = require('../settings_scroll/settings_scrollView.js');

var _backboneEventsInitJs = require('../backboneEventsInit.js');

var settings_scrollController = (function () {
  var addCity = {},
      deleteCity = {};

  _backboneEventsInitJs.gEvent.on('addListCity', function () {
    addCity = {};
  });

  _backboneEventsInitJs.gEvent.on('resetAddData', function () {
    addCity = {};
    deleteCity = {};
    _settings_scrollSettings_scrollViewJs.settings_scrollView.resetAddCities();
  });

  _backboneEventsInitJs.gEvent.on('deletedCityList', function () {
    deleteCity = {};
  });

  return {
    init: function init() {
      // init scroll
      _settings_scrollSettings_scrollViewJs.settings_scrollView.elems().cities.customScroll({
        vertical: true,
        horizontal: false
      });
      _settings_scrollSettings_scrollViewJs.settings_scrollView.initElements();
    },

    addCities: function addCities(data) {
      if (!addCity[data.place_id]) {
        addCity[data.place_id] = data;
      } else {
        delete addCity[data.place_id];
      }
      if (Object.keys(addCity).length !== 0) {
        _backboneEventsInitJs.gEvent.trigger('selectCity', addCity);
      } else {
        _backboneEventsInitJs.gEvent.trigger('disabledCity', {});
      }
    },

    deleteCities: function deleteCities(index) {
      if (!deleteCity[index]) {
        deleteCity[index] = 'del';
      } else {
        delete deleteCity[index];
      }
      _backboneEventsInitJs.gEvent.trigger('selectDeleteCity', deleteCity);
    }
  };
})();
exports.settings_scrollController = settings_scrollController;

},{"../backboneEventsInit.js":3,"../settings_scroll/settings_scrollView.js":14}],14:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _settings_searchSearchModelJs = require('../settings_search/searchModel.js');

var _settings_townSettings_townTemplateJs = require('../settings_town/settings_townTemplate.js');

var _settings_townSettings_townTemplateJs2 = _interopRequireDefault(_settings_townSettings_townTemplateJs);

var _settings_townSettings_town_atcmplTemplateJs = require('../settings_town/settings_town_atcmplTemplate.js');

var _settings_townSettings_town_atcmplTemplateJs2 = _interopRequireDefault(_settings_townSettings_town_atcmplTemplateJs);

var _settings_scrollSettings_scrollControllerJs = require('../settings_scroll/settings_scrollController.js');

var _page_sliderPage_sliderControllerJs = require('../page_slider/page_sliderController.js');

var _backboneEventsInitJs = require('../backboneEventsInit.js');

// init template
var townTemplate = new _settings_townSettings_townTemplateJs2['default']();
var townTemplateAtcmpl = new _settings_townSettings_town_atcmplTemplateJs2['default']();

var settings_scrollView = (function () {
  var cont = undefined,
      countryVal = undefined,
      data = undefined,
      dataCityLoaded = {},
      flagCash = undefined,
      tempCash = undefined;

  // reset checked checkbox
  function resetCheckList() {
    $('.set_cities__town .set_cities__del_chex').prop('checked', false);
  }

  //convert to celsius
  function toCelsius(temp) {
    return ((temp - 32) / 1.8).toFixed(0);
  }

  _backboneEventsInitJs.gEvent.on('addListCity', function () {
    resetCheckList();
  });

  _backboneEventsInitJs.gEvent.on('dataUpdate', function (newCity, name, flag) {
    dataCityLoaded[name] = newCity[name];
    flagCash = flag;
    settings_scrollView.renderData(flag);
  });

  _backboneEventsInitJs.gEvent.on('dataGet', function (data, currenCity, flag) {
    dataCityLoaded = data;
    flagCash = flag;
    settings_scrollView.renderData(flag);
  });

  _backboneEventsInitJs.gEvent.on('deletedCityList', function () {
    if (Object.keys(dataCityLoaded).length < 1) {
      cont.html('');
    } else {
      settings_scrollView.renderData(flagCash);
    }
  });

  function moveToNextSlide() {
    $('.set_cities__town').on('click', function (ev) {
      if (ev.target.classList[0] !== 'set_cities__check_icon' && ev.target.classList[0] !== 'set_cities__del_chex') {
        _page_sliderPage_sliderControllerJs.page_sliderController.goToNextSities($(ev.currentTarget).data('slide-index'));
      }
    });
  }

  return {
    initElements: function initElements() {
      cont = $('.set_cities .custom-scroll_inner');
    },

    renderAutocomplite: function renderAutocomplite() {
      if (cont) {
        cont.html('');
      }
      data = _settings_searchSearchModelJs.searchModel.getAutocompliteData();

      data.forEach(function (val, i) {
        if (val.terms.length === 3) {
          countryVal = val.terms[2].value;
        } else {
          countryVal = val.terms[1].value;
        }
        cont.append(townTemplateAtcmpl.renderTemplate({ city: val.terms[0].value, country: countryVal }, i));
      });

      // init event
      settings_scrollView.event.addCities();
    },

    renderData: function renderData(temp) {
      if (typeof temp === "boolean") {
        tempCash = temp;
      }
      if (cont) {
        cont.html('');
      }
      var index = 0;
      for (var cityItem in dataCityLoaded) {
        var item = dataCityLoaded[cityItem];
        var temper = undefined;
        if (!tempCash) {
          temper = toCelsius(item.currently.temperature);
        } else {
          temper = item.currently.temperature.toFixed(0);
        }
        cont.append(townTemplate.renderTemplate({
          weather_icon: item.currently.icon,
          temprature: temper,
          city: item.name,
          weather: item.currently.summary
        }, index, cityItem));
        index++;
      }
      settings_scrollView.event.deleteCities();
      moveToNextSlide();
    },

    event: {
      addCities: function addCities() {
        $('.set_cities__town .set_cities__del_chex').on('change', function (ev) {
          var index = ev.delegateTarget.attributes[2].value;
          _settings_scrollSettings_scrollControllerJs.settings_scrollController.addCities(data[index]);
        });
      },

      deleteCities: function deleteCities() {
        $('.set_cities__town .set_cities__del_chex').on('change', function (ev) {
          var index = ev.delegateTarget.attributes[2].value;
          _settings_scrollSettings_scrollControllerJs.settings_scrollController.deleteCities(index);
        });
      }
    },

    manipulateChexbox: function manipulateChexbox() {
      var labes = $('.set_cities__label');
      if (!labes.is(':visible')) {
        labes.fadeIn();
      } else {
        labes.fadeOut();
        _backboneEventsInitJs.gEvent.trigger('deletedCityList', false);
      }
    },

    elems: function elems() {
      return {
        cities: $('.set_cities')
      };
    },

    resetAddCities: function resetAddCities() {
      resetCheckList();
    }
  };
})();
exports.settings_scrollView = settings_scrollView;

},{"../backboneEventsInit.js":3,"../page_slider/page_sliderController.js":6,"../settings_scroll/settings_scrollController.js":13,"../settings_search/searchModel.js":16,"../settings_town/settings_townTemplate.js":18,"../settings_town/settings_town_atcmplTemplate.js":19}],15:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _settings_searchSearchModelJs = require('../settings_search/searchModel.js');

var _settings_searchSearchViewJs = require('../settings_search/searchView.js');

var _settings_scrollSettings_scrollViewJs = require('../settings_scroll/settings_scrollView.js');

var _backboneEventsInitJs = require('../backboneEventsInit.js');

var searchController = (function () {
  var caseInp = false,
      objAddCity = undefined,
      valueAutocomlite = undefined,
      objAddDelCity = {};

  _backboneEventsInitJs.gEvent.on('selectCity', function (data) {
    caseInp = true;
    objAddCity = data;
  });

  _backboneEventsInitJs.gEvent.on('selectDeleteCity', function (data) {
    objAddDelCity = data;
  });

  _backboneEventsInitJs.gEvent.on('disabledCity', function () {
    caseInp = false;
  });

  return {
    init: function init() {
      _settings_searchSearchViewJs.searchView.initElements();
      _settings_searchSearchModelJs.searchModel.initRequest();

      _settings_searchSearchViewJs.searchView.event.acceptDeleteCities(function () {
        if (!caseInp && Object.keys(objAddDelCity).length !== 0) {
          _settings_searchSearchViewJs.searchView.acceptDeleteCitiesDefault();
          _backboneEventsInitJs.gEvent.trigger('deletedCityList', objAddDelCity);
          objAddDelCity = {};
        }
      });

      _settings_searchSearchViewJs.searchView.event.onAcceptChange(function (ev) {
        ev.preventDefault();
        if (caseInp) {
          valueAutocomlite = false;
          _backboneEventsInitJs.gEvent.trigger('addListCity', objAddCity);
          caseInp = false;
          _settings_searchSearchViewJs.searchView.acceptDeleteCitiesDefault();
        } else {
          if (objAddDelCity) {
            objAddDelCity = {};
          }
          if (!valueAutocomlite) {
            _settings_searchSearchViewJs.searchView.deleteIconActive();
            _settings_scrollSettings_scrollViewJs.settings_scrollView.manipulateChexbox();
          }
        }
      });

      if (window.google) {
        _settings_searchSearchViewJs.searchView.event.onChange(function (ev) {
          _backboneEventsInitJs.gEvent.trigger('resetAddData', {});
          objAddDelCity = {};
          valueAutocomlite = ev.target.value;
          if (valueAutocomlite) {
            _settings_searchSearchModelJs.searchModel.getAutocomplite(valueAutocomlite).then(function () {
              _settings_scrollSettings_scrollViewJs.settings_scrollView.renderAutocomplite();
            });
          } else {
            _settings_scrollSettings_scrollViewJs.settings_scrollView.renderData();
            if (caseInp) {
              caseInp = false;
            }
          }
        });
      }
    }
  };
})();
exports.searchController = searchController;

},{"../backboneEventsInit.js":3,"../settings_scroll/settings_scrollView.js":14,"../settings_search/searchModel.js":16,"../settings_search/searchView.js":17}],16:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _backboneEventsInitJs = require('../backboneEventsInit.js');

var _appModelAppModelJs = require('../appModel/appModel.js');

var _google_apiGoogleApiInit = require('../google_api/googleApiInit');

var searchModel = (function () {
  var dataAutocomplite = {};

  function getDataCity(place_id) {
    _google_apiGoogleApiInit.googleServices.placeInf().getDetails({
      placeId: place_id
    }, function (place, status) {
      if (status === google.maps.places.PlacesServiceStatus.OK) {
        _appModelAppModelJs.modelApp.addCity(place.place_id, place.name, place.geometry.location.lat(), place.geometry.location.lng());
      }
    });
  }

  _backboneEventsInitJs.gEvent.on('addListCity', function (data) {
    for (var item in data) {
      getDataCity(data[item].place_id);
    }
  });

  return {
    initRequest: function initRequest() {
      _google_apiGoogleApiInit.googleServices.init();
    },

    getAutocomplite: function getAutocomplite(val) {
      return new Promise(function (resolve) {
        _google_apiGoogleApiInit.googleServices.service().getPlacePredictions({ input: val, types: ['(cities)'] }, function (data) {
          dataAutocomplite = data;
          if (data) {
            resolve();
          }
        });
      });
    },

    getAutocompliteData: function getAutocompliteData() {
      return dataAutocomplite;
    }
  };
})();
exports.searchModel = searchModel;

},{"../appModel/appModel.js":2,"../backboneEventsInit.js":3,"../google_api/googleApiInit":5}],17:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _backboneEventsInitJs = require('../backboneEventsInit.js');

var searchView = (function () {
  var input = undefined,
      acceptBtn = undefined,
      inputAccepBtn = undefined,
      addBtn = undefined;

  _backboneEventsInitJs.gEvent.on('dataUpdate', function () {
    searchView.onDelete();
    input.val('');
  });

  _backboneEventsInitJs.gEvent.on('selectDeleteCity', function (data) {
    if (Object.keys(data).length !== 0) {
      if (!addBtn.hasClass('icon-check')) {
        addBtn.addClass('icon-check');
      }
    } else {
      resetAcceptDel();
    }
  });

  _backboneEventsInitJs.gEvent.on('selectCity', function () {
    if (acceptBtn.hasClass('icon-delete')) {
      acceptBtn.removeClass('icon-delete');
      acceptBtn.addClass('icon-check');
    }
  });

  _backboneEventsInitJs.gEvent.on('disabledCity', function () {
    changeBtnOnDelete();
  });

  _backboneEventsInitJs.gEvent.on('addListCity', function () {
    changeBtnOnDelete();
    input.val('');
  });

  _backboneEventsInitJs.gEvent.on('resetAddData', function () {
    searchView.onDelete();
  });

  _backboneEventsInitJs.gEvent.on('resetAddData', function () {
    resetAcceptDel();
  });

  _backboneEventsInitJs.gEvent.on('deletedCityList', function () {
    resetAcceptDel();
  });

  function changeBtnOnDelete() {
    if (acceptBtn.hasClass('icon-check')) {
      acceptBtn.removeClass('icon-check');
      acceptBtn.addClass('icon-delete');
    }
  }

  function resetAcceptDel() {
    if (addBtn.hasClass('icon-check')) {
      addBtn.removeClass('icon-check');
    }
    acceptBtn.css('color', 'white');
  }

  return {
    initElements: function initElements() {
      input = $(".menu_set_search__inp");
      acceptBtn = $('.menu_set_search__del');
      addBtn = $('.menu_set_search__addBut');
      inputAccepBtn = $('.menu_set_search__add_inp');
    },

    onAccept: function onAccept() {
      if (acceptBtn.hasClass('icon-delete')) {
        acceptBtn.removeClass('icon-delete');
        acceptBtn.addClass('icon-check');
      }
    },

    onDelete: function onDelete() {
      if (acceptBtn.hasClass('icon-check')) {
        acceptBtn.removeClass('icon-check');
        acceptBtn.addClass('icon-delete');
      }
    },

    acceptDeleteCitiesDefault: function acceptDeleteCitiesDefault() {
      if (inputAccepBtn.prop("checked")) {
        inputAccepBtn.prop("checked", false);
      } else {
        inputAccepBtn.prop("checked", true);
      }
    },

    deleteIconActive: function deleteIconActive() {
      acceptBtn.css('color', 'red');
    },

    event: {
      onChange: function onChange(callback) {
        input.on('input', callback);
      },

      onAcceptChange: function onAcceptChange(callback) {
        acceptBtn.on('click', callback);
      },

      acceptDeleteCities: function acceptDeleteCities(callback) {
        addBtn.click(callback);
      }
    }
  };
})();
exports.searchView = searchView;

},{"../backboneEventsInit.js":3}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _default = function _default() {
    _classCallCheck(this, _default);

    this.renderTemplate = function (obj, iter, cityName) {
        return "<div class=\"set_cities__town\" data-slide-index=\"" + iter + "\">\n    <div class=\"set_cities__icon icon-" + obj.weather_icon + "\"></div>\n    <div class=\"set_cities__temp\">" + obj.temprature + "&deg;</div>\n    <div class=\"set_cities__info\">\n        <div class=\"set_cities__name\">" + obj.city + "</div>\n        <div class=\"set_cities__weather\">// " + obj.weather + "</div>\n    </div>\n    <input type=\"checkbox\" class=\"set_cities__del_chex\" data-name=\"" + cityName + "\" id=\"del" + iter + "\">\n    <label for=\"del" + iter + "\" class=\"set_cities__label set_cities__label--hide\">\n        <div class=\"set_cities__check_icon icon-check\"></div>\n    </label>\n</div>";
    };
};

exports["default"] = _default;
module.exports = exports["default"];

},{}],19:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _default = function _default() {
    _classCallCheck(this, _default);

    this.renderTemplate = function (obj, iter) {
        return "<div class=\"set_cities__town\">\n    <div class=\"set_cities__info\">\n        <div class=\"set_cities__name\">" + obj.city + "</div>\n        <div class=\"set_cities__weather\">// " + obj.country + "</div>\n    </div>\n    <input type=\"checkbox\" class=\"set_cities__del_chex\" data-index=\"" + iter + "\" id=\"del" + iter + "\">\n    <label for=\"del" + iter + "\" class=\"set_cities__label\">\n        <div class=\"set_cities__check_icon icon-check\"></div>\n    </label>\n</div>";
    };
};

exports["default"] = _default;
module.exports = exports["default"];

},{}],20:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appModelAppModelJs = require('../appModel/appModel.js');

var _sunSunViewJs = require('../sun/sunView.js');

var _backboneEventsInitJs = require('../backboneEventsInit.js');

var sunController = (function () {
  var beta = undefined,
      centerX = undefined,
      centerY = undefined,
      radius = undefined,
      fullCorner = undefined,
      contSun = undefined,
      timer = undefined;

  function move(previousPh, nextPhase) {
    var x = undefined,
        y = undefined;
    (function iter() {
      x = centerX - radius * Math.cos(beta + fullCorner * previousPh) - contSun.offsetWidth / 2;
      y = centerY - radius * Math.sin(beta + fullCorner * previousPh) - contSun.offsetWidth / 2;

      timer = setTimeout(iter, 300);

      _sunSunViewJs.sunView.render(x.toFixed(2), y.toFixed(2), previousPh);

      setPhase(previousPh);
      if (previousPh > nextPhase) {
        previousPh -= 0.03;
        if (previousPh < nextPhase) {
          clearTimeout(timer);
        }
      } else {
        previousPh += 0.03;
        if (previousPh > nextPhase) {
          clearTimeout(timer);
        }
      }
    })();
  }

  function setPhase(phase) {
    _appModelAppModelJs.modelApp.setPreviousPhase(phase);
  }

  _backboneEventsInitJs.gEvent.on("resetCity", function () {
    clearTimeout(timer);
    move(_appModelAppModelJs.modelApp.getPreviousPhase(), 0);
  });

  _backboneEventsInitJs.gEvent.on('dataUpdate', function (gData, city) {
    var data = gData[city];

    if (!contSun) {
      contSun = _sunSunViewJs.sunView.elems().sun_cont;
    }

    if (data) {
      var sunrise = timeConvert(data.daily.data[0].sunriseTime, data.timezone),
          sunset = timeConvert(data.daily.data[0].sunsetTime, data.timezone),
          currentTime = timeConvert(data.currently.time, data.timezone),
          previousPh = _appModelAppModelJs.modelApp.getPreviousPhase(),
          nextPhase = (currentTime - sunrise) / (sunset - sunrise);

      clearTimeout(timer);
      move(previousPh, nextPhase);
    }
  });

  _backboneEventsInitJs.gEvent.on("slideChange", function (gData, city, flag, changeState) {
    if (!changeState && gData[city]) {
      var data = gData[city];

      var sunrise = timeConvert(data.daily.data[0].sunriseTime, data.timezone),
          sunset = timeConvert(data.daily.data[0].sunsetTime, data.timezone),
          currentTime = timeConvert(data.currently.time, data.timezone),
          previousPh = _appModelAppModelJs.modelApp.getPreviousPhase(),
          nextPhase = (currentTime - sunrise) / (sunset - sunrise);

      clearTimeout(timer);
      move(previousPh, nextPhase);
    }
  });

  function timeConvert(timeStamp, utc) {
    var c = moment.tz(timeStamp * 1000, utc);
    return c.format("HH.mm");
  }

  return {
    init: function init() {
      _backboneEventsInitJs.gEvent.on('dataGet', function (gData, city, flag, changeState) {

        _sunSunViewJs.sunView.initElements();
        contSun = _sunSunViewJs.sunView.elems().sun_cont;

        if (!changeState) {
          clearTimeout(timer);
          if (Object.keys(gData).length !== 0 && city && contSun) {
            var data = gData[city];

            var sunrise = timeConvert(data.daily.data[0].sunriseTime, data.timezone),
                sunset = timeConvert(data.daily.data[0].sunsetTime, data.timezone),
                currentTime = timeConvert(data.currently.time, data.timezone);

            var windWidth = _sunSunViewJs.sunView.elems().wind.width(),
                windHeight = _sunSunViewJs.sunView.elems().wind.height(),
                heightHalf = windHeight / 2;

            radius = heightHalf / 2 + windWidth * windWidth / (8 * heightHalf);

            var corner = 2 * Math.acos((radius - heightHalf) / radius),
                gamma = 2 * Math.asin(contSun.offsetWidth / 2 / (2 * radius));

            fullCorner = corner + gamma * 2;
            beta = 1.5708 - fullCorner / 2;
            centerX = windWidth / 2;
            centerY = heightHalf + radius;

            var previousPh = _appModelAppModelJs.modelApp.getPreviousPhase(),
                nextPhase = (currentTime - sunrise) / (sunset - sunrise);

            move(previousPh, nextPhase);
          } else {
            move(_appModelAppModelJs.modelApp.getPreviousPhase(), 1);
          }
        }
      });
    }
  };
})();
exports.sunController = sunController;

},{"../appModel/appModel.js":2,"../backboneEventsInit.js":3,"../sun/sunView.js":21}],21:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var sunView = (function () {
  var sunCount = undefined,
      wind = $(window),
      sun_end = undefined,
      sun = undefined;

  return {
    initElements: function initElements() {
      sunCount = document.getElementById('sunCont');
      sun_end = document.getElementById('sun_end');
      sun = $('.sun');
    },
    render: function render(left, top, phase) {
      sun_end.style.opacity = phase.toFixed(2);
      sunCount.style.left = left + 'px';
      sunCount.style.top = top + 'px';
    },
    elems: function elems() {
      return {
        sun_cont: sunCount,
        wind: wind
      };
    }
  };
})();
exports.sunView = sunView;

},{}],22:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appModelAppModelJs = require('../appModel/appModel.js');

var _weatherWeatherViewJs = require('../weather/weatherView.js');

var _backboneEventsInitJs = require('../backboneEventsInit.js');

var weatherController = (function () {
  _backboneEventsInitJs.gEvent.on('domRendered', function (cont) {
    _weatherWeatherViewJs.weatherView.initElement(cont);
    _weatherWeatherViewJs.weatherView.event.reload(function () {
      _appModelAppModelJs.modelApp.reloadData();
    });
  });
})();
exports.weatherController = weatherController;

},{"../appModel/appModel.js":2,"../backboneEventsInit.js":3,"../weather/weatherView.js":24}],23:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _default = function _default() {
  _classCallCheck(this, _default);

  this.renderTemplate = function (primaryinfo, slider, info) {
    return "\n      <section class=\"weather\">\n      " + primaryinfo + "\n        <div class=\"mobile_center_right\">\n          " + slider + "\n          " + info + "\n        </div>\n      </section>\n      ";
  };
};

exports["default"] = _default;
module.exports = exports["default"];

},{}],24:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _backboneEventsInitJs = require('../backboneEventsInit.js');

var _weather_primary_infoWeather_primary_infoTemplateJs = require('../weather_primary_info/weather_primary_infoTemplate.js');

var _weather_primary_infoWeather_primary_infoTemplateJs2 = _interopRequireDefault(_weather_primary_infoWeather_primary_infoTemplateJs);

var _weather_infoWeather_infoTemplateJs = require('../weather_info/weather_infoTemplate.js');

var _weather_infoWeather_infoTemplateJs2 = _interopRequireDefault(_weather_infoWeather_infoTemplateJs);

var _weatherTemplateJs = require('./weatherTemplate.js');

var _weatherTemplateJs2 = _interopRequireDefault(_weatherTemplateJs);

var _weather_sliderWeather_sliderTemplateJs = require('../weather_slider/weather_sliderTemplate.js');

var _weather_sliderWeather_sliderTemplateJs2 = _interopRequireDefault(_weather_sliderWeather_sliderTemplateJs);

var weatherPrimaryTemplate = new _weather_primary_infoWeather_primary_infoTemplateJs2['default']();
var weatherInfoTemplate = new _weather_infoWeather_infoTemplateJs2['default']();
var weatherTemplate = new _weatherTemplateJs2['default']();
var weatherSliderTemplate = new _weather_sliderWeather_sliderTemplateJs2['default']();

var weatherView = (function () {
  // for view
  var reloadBtn = undefined,
      body = undefined,
      weatherAnimEl = undefined,
      moonphase = ['full-moon', 'almost-old', 'old-moon', 'grow-moon', 'almost-full', 'empty-moon'],
      backgGradient = {
    morning: 'linear-gradient(to right, rgb(61, 160, 255) 0%, rgb(22, 110, 239))',
    day: 'linear-gradient(to right, rgb(22, 110, 239) 0%, rgb(2, 70, 148))',
    endDay: 'linear-gradient(to right, rgb(22, 110, 239) 0%, rgb(2, 54, 108))',
    sunset: 'linear-gradient(to right, rgb(248, 159, 0) 0%, rgb(239, 89, 0))',
    night: 'linear-gradient(to right, rgb(21, 24, 78) 0%, rgb(8, 11, 33))'
  },
      windDirection = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'],
      objWeatherClass = {
    rain: 'rain',
    drizzle: 'rain',
    snow: 'snow'
  };

  _backboneEventsInitJs.gEvent.on("slideChange", function (data, currenCity) {
    var obj = data[currenCity];
    deletedClasses();
    changeAnimationWeather(obj);
    changeGradientColor(obj);
  });

  //convert to celsius
  function toCelsius(temp) {
    return ((temp - 32) / 1.8).toFixed(0);
  }

  // conver time stamp
  function toConverTimeStamp(timestamp, utc) {
    var converTime = moment.tz(timestamp * 1000, utc);
    return {
      time: converTime.format('HH') + ':' + converTime.format('mm'),
      dayWeek: converTime.format('dddd'),
      month: converTime.format('MMMM'),
      day: converTime.format('D'),
      hour: converTime.format('H.mm')
    };
  }

  function deletedClasses() {
    for (var value in objWeatherClass) {
      if (weatherAnimEl) {
        weatherAnimEl.removeClass(value);
      }
    }
  }

  function changeAnimationWeather(obj) {
    //add class  rain, snow, drizzle
    if (weatherAnimEl) {
      weatherAnimEl.hide();

      if (objWeatherClass[obj.currently.icon]) {
        weatherAnimEl.show();
        weatherAnimEl.addClass(objWeatherClass[obj.currently.icon]);
      }
    }
  }

  function changeGradientColor(obj) {
    if (!body) {
      body = $('body');
    }
    if (obj) {
      var currentTime = Number(toConverTimeStamp(obj.currently.time, obj.timezone).hour);
      var sunset = Number(toConverTimeStamp(obj.daily.data[0].sunsetTime, obj.timezone).hour);
      var sunrise = Number(toConverTimeStamp(obj.daily.data[0].sunriseTime, obj.timezone).hour);

      if (currentTime < sunrise || currentTime > sunset) {
        body.css('background', backgGradient.night);
      } else if (currentTime < sunrise + 1 && currentTime > sunrise) {
        body.css('background', backgGradient.morning);
      } else if (currentTime > sunrise + 1 && currentTime < sunset - 2) {
        body.css('background', backgGradient.day);
      } else if (currentTime > sunset - 2 && currentTime < sunset - 1) {
        body.css('background', backgGradient.endDay);
      } else {
        body.css('background', backgGradient.sunset);
      }
    }
  }

  function getMoonIcon(phasesCurrent, phaseNext) {
    var currentPhase = phasesCurrent.moonPhase * 100;
    var nextPhase = phaseNext.moonPhase * 100;
    if (currentPhase >= 90) {
      return moonphase[0];
    }
    if (currentPhase < 90 && currentPhase >= 40 && nextPhase < currentPhase) {
      return moonphase[1];
    }
    if (currentPhase < 40 && currentPhase >= 10 && nextPhase < currentPhase) {
      return moonphase[2];
    }
    if (currentPhase < 40 && currentPhase >= 10 && nextPhase > currentPhase) {
      return moonphase[3];
    }
    if (currentPhase < 90 && currentPhase >= 40 && nextPhase > currentPhase) {
      return moonphase[4];
    }
    if (currentPhase < 10) {
      return moonphase[5];
    }
  }

  function degToCompass(num) {
    var val = Math.floor(num / 22.5 + 0.5);
    return windDirection[val % 16];
  }

  // render weather block
  function _render(obj, cont, flagTemp) {
    weatherAnimEl = $('.weatherAnim');
    // convert temperature
    var tempConvert = undefined;

    if (!flagTemp) {
      tempConvert = toCelsius(obj.currently.temperature);
    } else {
      tempConvert = obj.currently.temperature.toFixed(0);
    }

    // slice data for primary inform
    var objPrimaryData = {
      time: toConverTimeStamp(obj.currently.time, obj.timezone).time,
      cityName: obj.name,
      dayWeek: toConverTimeStamp(obj.currently.time, obj.timezone).dayWeek,
      month: toConverTimeStamp(obj.currently.time, obj.timezone).month,
      day: toConverTimeStamp(obj.currently.time, obj.timezone).day,
      weather_class: obj.currently.icon,
      temp: tempConvert,
      weather_desc: obj.currently.summary,
      icon_moon: getMoonIcon(obj.daily.data[0], obj.daily.data[1]),
      moon_info: (obj.daily.data[0].moonPhase * 100).toFixed(0)
    };

    // slice data for slider
    var arrHourlyData = [];
    for (var i = 0; i <= 24; i++) {
      var _tempConvert = undefined;
      if (!flagTemp) {
        _tempConvert = toCelsius(obj.hourly.data[i].temperature);
      } else {
        _tempConvert = obj.hourly.data[i].temperature.toFixed(0);
      }

      arrHourlyData.push({
        time: toConverTimeStamp(obj.hourly.data[i].time, obj.timezone).time,
        temperature: _tempConvert,
        icon: obj.hourly.data[i].icon
      });
    }

    // slice data for inform

    var objInfoData = {
      wet: obj.daily.data[0].humidity.toFixed(1),
      windy: obj.currently.windSpeed.toFixed(0),
      sunrise: toConverTimeStamp(obj.daily.data[0].sunriseTime, obj.timezone).time,
      sunset: toConverTimeStamp(obj.daily.data[0].sunsetTime, obj.timezone).time,
      windBearing: degToCompass(obj.currently.windBearing)
    };

    // render templates
    var domRend = new Promise(function (resolve) {
      $(cont).html(weatherTemplate.renderTemplate(weatherPrimaryTemplate.renderTemplate(objPrimaryData), weatherSliderTemplate.renderTemplate(arrHourlyData), weatherInfoTemplate.renderTemplate(objInfoData)));
      resolve();
    });

    // event for init slider
    domRend.then(function () {
      // fixed slider page
      $('.bx-viewport').css('height', 'auto');
      _backboneEventsInitJs.gEvent.trigger('domRendered', cont);
    });
  }

  return {
    initElement: function initElement(cont) {
      reloadBtn = $(cont).find('.weather_refresh__time_icon');
    },
    // init event
    event: {
      reload: function reload(callback) {
        reloadBtn.click(callback);
      }
    },
    // start render
    render: function render(obj, cont, flagTemp) {
      _render(obj, cont, flagTemp);
    },

    changeAnimation: function changeAnimation(obj) {
      deletedClasses();
      changeAnimationWeather(obj);
      changeGradientColor(obj);
    }
  };
})();
exports.weatherView = weatherView;

},{"../backboneEventsInit.js":3,"../weather_info/weather_infoTemplate.js":27,"../weather_primary_info/weather_primary_infoTemplate.js":28,"../weather_slider/weather_sliderTemplate.js":30,"./weatherTemplate.js":23}],25:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _default = function _default() {
    _classCallCheck(this, _default);

    this.renderTemplate = function (daysData) {
        var container = '\n      <div class="days_wrapper">\n        <section class="days">\n            ' + daysData.map(function (el) {
            return '<div class="days_inf">\n    <div class="days_inf__day_week">' + el.dayWeek + '</div>\n    <div class="days_inf__icon icon-' + el.icon + '"></div>\n    <div class="days_inf__tempCont">\n        <div class="days_inf__tempRange" style="left: ' + el.positionMin + '%; right: ' + el.positionMax + '%; top: ' + el.positionMin + '%; bottom: ' + el.positionMax + '%;">\n            <span class="days_inf__val_min">' + el.minTemp + '&deg;</span>\n            <span class="days_inf__val_max">' + el.maxTemp + '&deg;</span>\n        </div>\n    </div>\n</div>';
        }).join('') + '\n          </section>\n          </div>\n      ';

        return container;
    };
};

exports['default'] = _default;
module.exports = exports['default'];

},{}],26:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _backboneEventsInitJs = require('../backboneEventsInit.js');

var _weather_daysTemplateJs = require('./weather_daysTemplate.js');

var _weather_daysTemplateJs2 = _interopRequireDefault(_weather_daysTemplateJs);

var weather_daysTemplate = new _weather_daysTemplateJs2['default']();

var weather_daysView = (function () {
  var arrDataDays = undefined,
      arrDataDaysCont = [],
      cashDataDays = [];

  function toCelsius(temp) {
    return ((temp - 32) / 1.8).toFixed(0);
  }

  // conver time stamp
  function toConverTimeStamp(timestamp, utc) {
    var converTime = moment.tz(timestamp * 1000, utc);
    return {
      day: converTime.format('ddd')
    };
  }

  _backboneEventsInitJs.gEvent.on('updateViewDays', function (flagDay) {
    for (var i = 0; i < cashDataDays.length; i++) {
      $(arrDataDaysCont[i]).find('.days_wrapper').remove();

      var arrDataTemporary = undefined;
      if (!flagDay) {
        arrDataTemporary = cashDataDays[i].slice(0, flagDay.length - 1);
      } else {
        arrDataTemporary = cashDataDays[i].slice(0, flagDay);
      }

      $(arrDataDaysCont[i]).append(weather_daysTemplate.renderTemplate(arrDataTemporary));
    }
  });

  return {
    render: function render(dataObj, containerItem, flagTemp, flagDay) {
      arrDataDays = [];
      var min = undefined,
          max = undefined,
          difference = undefined;

      // temperature range calculation
      min = dataObj.daily.data[0].temperatureMin;
      max = dataObj.daily.data[0].temperatureMax;

      dataObj.daily.data.forEach(function (item) {
        if (item.temperatureMin < min) {
          min = item.temperatureMin;
        }
        if (item.temperatureMax > max) {
          max = item.temperatureMax;
        }
      });
      difference = max - min;

      dataObj.daily.data.forEach(function (item) {
        var tempConvertmin = undefined,
            tempConvertmax = undefined;
        if (!flagTemp) {
          tempConvertmin = toCelsius(item.temperatureMin);
          tempConvertmax = toCelsius(item.temperatureMax);
        } else {
          tempConvertmin = item.temperatureMin.toFixed(0);
          tempConvertmax = item.temperatureMax.toFixed(0);
        }

        arrDataDays.push({
          dayWeek: toConverTimeStamp(item.time).day,
          icon: item.icon,
          positionMin: (item.temperatureMin - min) / difference * 100,
          positionMax: 100 - (item.temperatureMax - min) / difference * 100,
          minTemp: tempConvertmin,
          maxTemp: tempConvertmax
        });
      });

      // cash data
      cashDataDays.push(arrDataDays);

      var arrDataTemporary = undefined;
      if (!flagDay) {
        arrDataTemporary = arrDataDays.slice(0, arrDataDays.length - 1);
      } else {
        arrDataTemporary = arrDataDays.slice(0, flagDay);
      }

      // cash link on data
      arrDataDaysCont.push(containerItem);

      $(containerItem).append(weather_daysTemplate.renderTemplate(arrDataTemporary));
    }
  };
})();
exports.weather_daysView = weather_daysView;

},{"../backboneEventsInit.js":3,"./weather_daysTemplate.js":25}],27:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _default = function _default(obj) {
    _classCallCheck(this, _default);

    this.renderTemplate = function (obj) {
        return "<div class=\"weather_info\">\n    <div class=\"weather_info__section\">\n        <div class=\"weather_info__icon icon-humidity\"></div>\n        <div class=\"weather_info__wet\">" + obj.wet + "%</div>\n    </div>\n    <div class=\"weather_info__section\">\n        <div class=\"weather_info__icon\">\n            <div class=\"weather_info__icon_direction icon-wind-direction\"\">\n             <span class=\"icon_direction__value\">" + obj.windBearing + "</span>\n</div>\n        </div>\n        <div class=\"weather_info__windy\"><span class=\"weather_info__value\">" + obj.windy + "</span>\n            <span class=\"weather_info__pre_windy\">m/c</span>\n        </div>\n    </div>\n    <div class=\"weather_info__section\">\n        <div class=\"weather_info__icon icon-sunrise\"></div>\n        <div class=\"weather_info__sunrice\">" + obj.sunrise + "</div>\n    </div>\n    <div class=\"weather_info__section\">\n        <div class=\"weather_info__icon icon-sunset\"></div>\n        <div class=\"weather_info__sunset\">" + obj.sunset + "</div>\n    </div>\n</div>";
    };
};

exports["default"] = _default;
module.exports = exports["default"];

},{}],28:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _default = function _default() {
    _classCallCheck(this, _default);

    this.renderTemplate = function (obj) {
        var changeFont = '';
        if (obj.cityName.length > 12) {
            changeFont = 'style="font-size: 2.8em;"';
        }
        return ' <div class="mobile_center_left">\n      <div class="weather_refresh">\n    <time class="weather_refresh__time">' + obj.time + '</time>\n    <div class="weather_refresh__time_icon icon-refresh"></div>\n</div>\n<h1 class="weather_city" ' + changeFont + '>' + obj.cityName + '</h1>\n<h2 class="weather_data">\n    <span class="weather_data__day_week">' + obj.dayWeek + '</span>,\n    <span class="weather_data__month">' + obj.month + '</span>\n    <span class="weather_data__day">' + obj.day + '</span>\n</h2>\n\n<div class="weather_details">\n    <div class="weather_details__icons icon-' + obj.weather_class + '"></div>\n    <div class="weather_details__inform">\n        <div class="weather_details__temp">' + obj.temp + '&deg;</div>\n        <span class="weather_details__slash">//</span>\n        <span class="weather_details__inform_desc">' + obj.weather_desc + '</span>\n    </div>\n    <div class="weather_details__sunrise">\n        <div class="weather_details__sunrise_icon icon-' + obj.icon_moon + '"></div>\n        <div class="weather_details__phase_moon">' + obj.moon_info + '%</div>\n    </div>\n</div>\n</div>';
    };
};

exports['default'] = _default;
module.exports = exports['default'];

},{}],29:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _weather_sliderWeather_sliderViewJs = require('../weather_slider/weather_sliderView.js');

var _backboneEventsInitJs = require('../backboneEventsInit.js');

var weather_sliderController = (function () {
  _backboneEventsInitJs.gEvent.on('slideChange', function () {
    _weather_sliderWeather_sliderViewJs.weather_sliderView.resetSlider();
  });

  _backboneEventsInitJs.gEvent.on('domRendered', function () {
    weather_sliderController.init();
  });

  return {
    init: function init() {
      _weather_sliderWeather_sliderViewJs.weather_sliderView.initElements();

      var scrollContent = _weather_sliderWeather_sliderViewJs.weather_sliderView.elems().scrollContent,
          scrollPane = _weather_sliderWeather_sliderViewJs.weather_sliderView.elems().scrollPane;

      _weather_sliderWeather_sliderViewJs.weather_sliderView.elems().scrollbar.slider({
        slide: function slide(event, ui) {
          if (scrollContent.width() > scrollPane.width()) {
            scrollContent.css("margin-left", Math.round(ui.value / 100 * (scrollPane.width() - scrollContent.width())) + "px");
          } else {
            scrollContent.css("margin-left", 0);
          }
        }
      });
      if (jQuery.support.touch) {
        _weather_sliderWeather_sliderViewJs.weather_sliderView.initEventTouch();
      }
    }
  };
})();
exports.weather_sliderController = weather_sliderController;

},{"../backboneEventsInit.js":3,"../weather_slider/weather_sliderView.js":31}],30:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _default = function _default() {
  _classCallCheck(this, _default);

  this.renderTemplate = function (arrHourlyData) {
    var container = '\n        <div class="weather_slider scroll-pane ui-widget ui-widget-header ui-corner-all">\n          <div class="weather_content scroll-content">\n            ' + arrHourlyData.map(function (el) {
      return '<div class="item_day_time scroll-content-item ui-widget-header">\n                 <div class="item_day_time__time">' + el.time + '</div>\n                 <div class="item_day_time__icon icon-' + el.icon + '"></div>\n                 <div class="item_day_time__temp">' + el.temperature + '&deg;</div>\n               </div>';
    }).join('') + '\n          </div>\n          <div class="weather_scrollBar scroll-bar-wrap ui-widget-content ui-corner-bottom">\n            <div class="scroll-bar"></div>\n          </div>\n        </div>\n      ';

    return container;
  };
};

exports['default'] = _default;
module.exports = exports['default'];

},{}],31:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var weather_sliderView = (function () {
  var scrollPane = undefined,
      scrollContent = undefined,
      weatherSlider = undefined,
      scrollbar = undefined,
      widthScroolContent = undefined,
      widthScroolContentView = undefined,
      marginPx = 0,
      recentlyPoin = 0;

  function sizeScrollbar() {
    scrollbar.find(".ui-slider-handle").css({
      width: 110,
      "margin-left": -110 / 2 - 1
    });
    $('.weather_slider .ui-slider-horizontal').width("").width(scrollbar.width() - 110);
  }

  function _resetSlider() {
    scrollContent.css("margin-left", "0px");
    $('.weather_slider .ui-slider-handle').css("left", "0%");
  }

  function sizeScrollbarInit() {
    sizeScrollbar();
    setTimeout(sizeScrollbar, 10); //safari wants a timeout
  }

  return {
    initElements: function initElements() {
      scrollPane = $(".scroll-pane");
      scrollContent = $(".scroll-content");
      widthScroolContent = scrollContent.width();
      weatherSlider = $(".weather_slider");
      widthScroolContentView = weatherSlider.width();
      scrollbar = $(".weather_slider .scroll-bar");

      scrollbar.find(".ui-slider-handle").wrap("<div class='ui-handle-helper-parent'></div>").parent();

      sizeScrollbarInit();

      $(window).resize(function () {
        widthScroolContent = scrollContent.width();
        widthScroolContentView = weatherSlider.width();
        sizeScrollbar();
        _resetSlider();
      });
    },
    initEventTouch: function initEventTouch() {
      var scrollPoint = $('.weather_slider .ui-slider-handle');
      // Event on touch device
      $(".weather_content").hammer().bind("pan", function (ev) {
        if (ev.gesture.additionalEvent === "panright") {
          if (recentlyPoin < 100) {
            //speed

            recentlyPoin += 0.2;
            recentlyPoin = Number(recentlyPoin.toFixed(1));

            marginPx = (widthScroolContent - widthScroolContentView) * recentlyPoin / 100;
            scrollContent.css("margin-left", "-" + marginPx + "px");
            scrollPoint.css("left", +recentlyPoin + "%");
          }
        } else if (ev.gesture.additionalEvent === "panleft") {
          if (recentlyPoin > 0) {
            //speed
            recentlyPoin = recentlyPoin - 0.2;
            recentlyPoin = Number(recentlyPoin.toFixed(1));

            marginPx = (widthScroolContent - widthScroolContentView) * recentlyPoin / 100;
            scrollContent.css("margin-left", "-" + marginPx + "px");
            scrollPoint.css("left", +recentlyPoin + "%");
          }
        }
      });
    },
    elems: function elems() {
      return {
        scrollbar: scrollbar,
        scrollContent: scrollContent,
        scrollPane: scrollPane
      };
    },
    resetSlider: function resetSlider() {
      _resetSlider();
    }
  };
})();
exports.weather_sliderView = weather_sliderView;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
